#include "pathgpu/kernels/kernels.h"
std::string luxrays::KernelSource_PathGPU = 
"/***************************************************************************\n"
" *   Copyright (C) 1998-2010 by authors (see AUTHORS.txt )                 *\n"
" *                                                                         *\n"
" *   This file is part of LuxRays.                                         *\n"
" *                                                                         *\n"
" *   LuxRays is free software; you can redistribute it and/or modify       *\n"
" *   it under the terms of the GNU General Public License as published by  *\n"
" *   the Free Software Foundation; either version 3 of the License, or     *\n"
" *   (at your option) any later version.                                   *\n"
" *                                                                         *\n"
" *   LuxRays is distributed in the hope that it will be useful,            *\n"
" *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *\n"
" *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *\n"
" *   GNU General Public License for more details.                          *\n"
" *                                                                         *\n"
" *   You should have received a copy of the GNU General Public License     *\n"
" *   along with this program.  If not, see <http://www.gnu.org/licenses/>. *\n"
" *                                                                         *\n"
" *   LuxRays website: http://www.luxrender.net                             *\n"
" ***************************************************************************/\n"
"\n"
"// List of symbols defined at compile time:\n"
"//  PARAM_PATH_COUNT\n"
"//  PARAM_IMAGE_WIDTH\n"
"//  PARAM_IMAGE_HEIGHT\n"
"//  PARAM_STARTLINE\n"
"\n"
"typedef struct {\n"
"	float r, g, b;\n"
"} Spectrum;\n"
"\n"
"typedef struct {\n"
"	float x, y, z;\n"
"} Point;\n"
"\n"
"typedef struct {\n"
"	float x, y, z;\n"
"} Vector;\n"
"\n"
"typedef struct {\n"
"	Point o;\n"
"	Vector d;\n"
"	float mint, maxt;\n"
"} Ray;\n"
"\n"
"typedef struct {\n"
"	float t;\n"
"	float b1, b2; // Barycentric coordinates of the hit point\n"
"	uint index;\n"
"} RayHit;\n"
"\n"
"typedef struct {\n"
"	Spectrum throughput;\n"
"	unsigned int depth, pixelIndex;\n"
"} Path;\n"
"\n"
"__kernel void Init(\n"
"		__global Path *paths,\n"
"		__global Ray *rays) {\n"
"	const int gid = get_global_id(0);\n"
"	if (gid >= PARAM_PATH_COUNT)\n"
"		return;\n"
"\n"
"	// Initialize the path\n"
"	__global Path *path = &paths[gid];\n"
"	path->throughput.r = 1.f;\n"
"	path->throughput.g = 1.f;\n"
"	path->throughput.b = 1.f;\n"
"	path->depth = 0;\n"
"	path->pixelIndex = (PARAM_STARTLINE * PARAM_IMAGE_WIDTH + gid) % (PARAM_IMAGE_WIDTH * PARAM_IMAGE_HEIGHT);\n"
"\n"
"	// Generate the eye ray\n"
"}\n"
"\n"
"__kernel void AdvancePaths(\n"
"		__global Path *paths,\n"
"		__global Ray *rays,\n"
"		__global RayHit *rayHits) {\n"
"	const int gid = get_global_id(0);\n"
"	if (gid >= PARAM_PATH_COUNT)\n"
"		return;\n"
"}\n"
;
