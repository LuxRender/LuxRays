#include <string>
namespace slg { namespace ocl {
std::string KernelSource_PathOCL_Kernels = 
"#line 1 \"patchocl_kernels.cl\"\n"
"\n"
"/***************************************************************************\n"
" *   Copyright (C) 1998-2010 by authors (see AUTHORS.txt )                 *\n"
" *                                                                         *\n"
" *   This file is part of LuxRays.                                         *\n"
" *                                                                         *\n"
" *   LuxRays is free software; you can redistribute it and/or modify       *\n"
" *   it under the terms of the GNU General Public License as published by  *\n"
" *   the Free Software Foundation; either version 3 of the License, or     *\n"
" *   (at your option) any later version.                                   *\n"
" *                                                                         *\n"
" *   LuxRays is distributed in the hope that it will be useful,            *\n"
" *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *\n"
" *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *\n"
" *   GNU General Public License for more details.                          *\n"
" *                                                                         *\n"
" *   You should have received a copy of the GNU General Public License     *\n"
" *   along with this program.  If not, see <http://www.gnu.org/licenses/>. *\n"
" *                                                                         *\n"
" *   LuxRays website: http://www.luxrender.net                             *\n"
" ***************************************************************************/\n"
"\n"
"//------------------------------------------------------------------------------\n"
"// Init Kernel\n"
"//------------------------------------------------------------------------------\n"
"\n"
"__kernel void Init(\n"
"		uint seedBase,\n"
"		__global GPUTask *tasks,\n"
"		__global GPUTaskStats *taskStats,\n"
"		__global Ray *rays,\n"
"		__global Camera *camera\n"
"		) {\n"
"//	const size_t gid = get_global_id(0);\n"
"//\n"
"//	//if (gid == 0)\n"
"//	//	printf(\"GPUTask: %d\\n\", sizeof(GPUTask));\n"
"//\n"
"//	// Initialize the task\n"
"//	__global GPUTask *task = &tasks[gid];\n"
"//\n"
"//	// Initialize random number generator\n"
"//	Seed seed;\n"
"//	InitRandomGenerator(seedBase + gid, &seed);\n"
"//\n"
"//	// Initialize the sample\n"
"//	Sampler_Init(gid,\n"
"//#if (PARAM_SAMPLER_TYPE == 3)\n"
"//			localMemTempBuff,\n"
"//#endif\n"
"//			&seed, &task->sample);\n"
"//\n"
"//	// Initialize the path\n"
"//	GenerateCameraPath(task, &rays[gid], &seed, camera);\n"
"//\n"
"//	// Save the seed\n"
"//	task->seed.s1 = seed.s1;\n"
"//	task->seed.s2 = seed.s2;\n"
"//	task->seed.s3 = seed.s3;\n"
"//\n"
"//	__global GPUTaskStats *taskStat = &taskStats[gid];\n"
"//	taskStat->sampleCount = 0;\n"
"}\n"
"\n"
"//------------------------------------------------------------------------------\n"
"// InitFrameBuffer Kernel\n"
"//------------------------------------------------------------------------------\n"
"\n"
"__kernel void InitFrameBuffer(\n"
"		__global Pixel *frameBuffer\n"
"#if defined(PARAM_ENABLE_ALPHA_CHANNEL)\n"
"		, __global AlphaPixel *alphaFrameBuffer\n"
"#endif\n"
"		) {\n"
"	const size_t gid = get_global_id(0);\n"
"	if (gid >= (PARAM_IMAGE_WIDTH + 2) * (PARAM_IMAGE_HEIGHT + 2))\n"
"		return;\n"
"\n"
"	__global Pixel *p = &frameBuffer[gid];\n"
"	p->c.r = 0.f;\n"
"	p->c.g = 0.f;\n"
"	p->c.b = 0.f;\n"
"	p->count = 0.f;\n"
"\n"
"#if defined(PARAM_ENABLE_ALPHA_CHANNEL)\n"
"	__global AlphaPixel *ap = &alphaFrameBuffer[gid];\n"
"	ap->alpha = 0.f;\n"
"#endif\n"
"}\n"
"\n"
"//------------------------------------------------------------------------------\n"
"// AdvancePaths Kernel\n"
"//------------------------------------------------------------------------------\n"
"\n"
"//#if defined(PARAM_HAS_TEXTUREMAPS)\n"
"//\n"
"//#if defined(PARAM_TEXTUREMAPS_RGB_PAGE_0)\n"
"//__global Spectrum *GetRGBAddress(const uint page, const uint offset\n"
"//#if defined(PARAM_TEXTUREMAPS_RGB_PAGE_0)\n"
"//                , __global Spectrum *texMapRGBBuff0\n"
"//#endif\n"
"//#if defined(PARAM_TEXTUREMAPS_RGB_PAGE_1)\n"
"//                , __global Spectrum *texMapRGBBuff1\n"
"//#endif\n"
"//#if defined(PARAM_TEXTUREMAPS_RGB_PAGE_2)\n"
"//                , __global Spectrum *texMapRGBBuff2\n"
"//#endif\n"
"//#if defined(PARAM_TEXTUREMAPS_RGB_PAGE_3)\n"
"//                , __global Spectrum *texMapRGBBuff3\n"
"//#endif\n"
"//#if defined(PARAM_TEXTUREMAPS_RGB_PAGE_4)\n"
"//                , __global Spectrum *texMapRGBBuff4\n"
"//#endif\n"
"//    ) {\n"
"//    switch (page) {\n"
"//#if defined(PARAM_TEXTUREMAPS_RGB_PAGE_1)\n"
"//        case 1:\n"
"//            return &texMapRGBBuff1[offset];\n"
"//#endif\n"
"//#if defined(PARAM_TEXTUREMAPS_RGB_PAGE_2)\n"
"//        case 2:\n"
"//            return &texMapRGBBuff2[offset];\n"
"//#endif\n"
"//#if defined(PARAM_TEXTUREMAPS_RGB_PAGE_3)\n"
"//        case 3:\n"
"//            return &texMapRGBBuff3[offset];\n"
"//#endif\n"
"//#if defined(PARAM_TEXTUREMAPS_RGB_PAGE_4)\n"
"//        case 4:\n"
"//            return &texMapRGBBuff4[offset];\n"
"//#endif\n"
"//        default:\n"
"//        case 0:\n"
"//            return &texMapRGBBuff0[offset];\n"
"//    }\n"
"//}\n"
"//#endif\n"
"//\n"
"//#if defined(PARAM_TEXTUREMAPS_ALPHA_PAGE_0)\n"
"//__global float *GetAlphaAddress(const uint page, const uint offset\n"
"//#if defined(PARAM_TEXTUREMAPS_ALPHA_PAGE_0)\n"
"//                , __global float *texMapAlphaBuff0\n"
"//#endif\n"
"//#if defined(PARAM_TEXTUREMAPS_ALPHA_PAGE_1)\n"
"//                , __global float *texMapAlphaBuff1\n"
"//#endif\n"
"//#if defined(PARAM_TEXTUREMAPS_ALPHA_PAGE_2)\n"
"//                , __global float *texMapAlphaBuff2\n"
"//#endif\n"
"//#if defined(PARAM_TEXTUREMAPS_ALPHA_PAGE_3)\n"
"//                , __global float *texMapAlphaBuff3\n"
"//#endif\n"
"//#if defined(PARAM_TEXTUREMAPS_ALPHA_PAGE_4)\n"
"//                , __global float *texMapAlphaBuff4\n"
"//#endif\n"
"//    ) {\n"
"//    switch (page) {\n"
"//#if defined(PARAM_TEXTUREMAPS_ALPHA_PAGE_1)\n"
"//        case 1:\n"
"//            return &texMapAlphaBuff1[offset];\n"
"//#endif\n"
"//#if defined(PARAM_TEXTUREMAPS_ALPHA_PAGE_2)\n"
"//        case 2:\n"
"//            return &texMapAlphaBuff2[offset];\n"
"//#endif\n"
"//#if defined(PARAM_TEXTUREMAPS_ALPHA_PAGE_3)\n"
"//        case 3:\n"
"//            return &texMapAlphaBuff3[offset];\n"
"//#endif\n"
"//#if defined(PARAM_TEXTUREMAPS_ALPHA_PAGE_4)\n"
"//        case 4:\n"
"//            return &texMapAlphaBuff4[offset];\n"
"//#endif\n"
"//        default:\n"
"//        case 0:\n"
"//            return &texMapAlphaBuff0[offset];\n"
"//    }\n"
"//}\n"
"//#endif\n"
"//\n"
"//#endif\n"
"\n"
"__kernel void AdvancePaths(\n"
"		__global GPUTask *tasks,\n"
"		__global Ray *rays,\n"
"		__global RayHit *rayHits,\n"
"		__global Pixel *frameBuffer,\n"
"		__global Material *mats,\n"
"		__global uint *meshMats,\n"
"		__global uint *meshIDs,\n"
"#if defined(PARAM_ACCEL_MQBVH)\n"
"		__global uint *meshFirstTriangleOffset,\n"
"		__global Mesh *meshDescs,\n"
"#endif\n"
"		__global Vector *vertNormals,\n"
"		__global Point *vertices,\n"
"		__global Triangle *triangles,\n"
"		__global Camera *camera\n"
"		) {\n"
"}\n"
; } }
