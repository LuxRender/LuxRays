#include <string>
namespace slg { namespace ocl {
std::string KernelSource_pathocl_kernels_mega = 
"#line 2 \"patchocl_kernels_mega.cl\"\n"
"\n"
"/***************************************************************************\n"
" * Copyright 1998-2013 by authors (see AUTHORS.txt)                        *\n"
" *                                                                         *\n"
" *   This file is part of LuxRender.                                       *\n"
" *                                                                         *\n"
" * Licensed under the Apache License, Version 2.0 (the \"License\");         *\n"
" * you may not use this file except in compliance with the License.        *\n"
" * You may obtain a copy of the License at                                 *\n"
" *                                                                         *\n"
" *     http://www.apache.org/licenses/LICENSE-2.0                          *\n"
" *                                                                         *\n"
" * Unless required by applicable law or agreed to in writing, software     *\n"
" * distributed under the License is distributed on an \"AS IS\" BASIS,       *\n"
" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.*\n"
" * See the License for the specific language governing permissions and     *\n"
" * limitations under the License.                                          *\n"
" ***************************************************************************/\n"
"\n"
"bool DirectLightSampling_ONE(\n"
"	__global DirectLightIlluminateInfo *info,\n"
"#if defined(PARAM_HAS_INFINITELIGHTS)\n"
"		const float worldCenterX,\n"
"		const float worldCenterY,\n"
"		const float worldCenterZ,\n"
"		const float worldRadius,\n"
"#endif\n"
"#if (PARAM_TRIANGLE_LIGHT_COUNT > 0)\n"
"		__global HitPoint *tmpHitPoint,\n"
"#endif\n"
"		const float time, const float u0, const float u1, const float u2,\n"
"#if defined(PARAM_HAS_PASSTHROUGH)\n"
"		const float lightPassThroughEvent,\n"
"#endif\n"
"		const bool lastPathVertex, const uint depth,\n"
"		__global BSDF *bsdf,\n"
"		__global Ray *shadowRay\n"
"		LIGHTS_PARAM_DECL) {\n"
"	const bool illuminated = DirectLight_Illuminate(\n"
"#if defined(PARAM_HAS_INFINITELIGHTS)\n"
"		worldCenterX, worldCenterY, worldCenterZ, worldRadius,\n"
"#endif\n"
"#if (PARAM_TRIANGLE_LIGHT_COUNT > 0)\n"
"		tmpHitPoint,\n"
"#endif\n"
"		u0, u1, u2,\n"
"#if defined(PARAM_HAS_PASSTHROUGH)\n"
"		lightPassThroughEvent,\n"
"#endif\n"
"		VLOAD3F(&bsdf->hitPoint.p.x), info\n"
"		LIGHTS_PARAM);\n"
"\n"
"	if (!illuminated)\n"
"		return false;\n"
"\n"
"	return DirectLight_BSDFSampling(\n"
"			info,\n"
"			time, lastPathVertex, depth,\n"
"			bsdf,\n"
"			shadowRay\n"
"			LIGHTS_PARAM);\n"
"}\n"
"\n"
"//------------------------------------------------------------------------------\n"
"// AdvancePaths (Mega-Kernel)\n"
"//------------------------------------------------------------------------------\n"
"\n"
"__kernel __attribute__((work_group_size_hint(64, 1, 1))) void AdvancePaths(\n"
"		KERNEL_ARGS\n"
"		) {\n"
"	const size_t gid = get_global_id(0);\n"
"	if (gid >= PARAM_TASK_COUNT)\n"
"		return;\n"
"\n"
"	//--------------------------------------------------------------------------\n"
"	// Advance the finite state machine step\n"
"	//--------------------------------------------------------------------------\n"
"\n"
"	__global GPUTask *task = &tasks[gid];\n"
"	__global GPUTaskDirectLight *taskDirectLight = &tasksDirectLight[gid];\n"
"	__global GPUTaskState *taskState = &tasksState[gid];\n"
"\n"
"	// Read the path state\n"
"	PathState pathState = taskState->state;\n"
"	uint depth = taskState->depth;\n"
"\n"
"	__global BSDF *bsdf = &taskState->bsdf;\n"
"\n"
"	__global Sample *sample = &samples[gid];\n"
"	__global float *sampleData = Sampler_GetSampleData(sample, samplesData);\n"
"	__global float *sampleDataPathBase = Sampler_GetSampleDataPathBase(sample, sampleData);\n"
"#if (PARAM_SAMPLER_TYPE != 0)\n"
"	// Used by Sampler_GetSamplePathVertex() macro\n"
"	__global float *sampleDataPathVertexBase = Sampler_GetSampleDataPathVertex(\n"
"			sample, sampleDataPathBase, depth);\n"
"#endif\n"
"\n"
"	// Read the seed\n"
"	Seed seedValue;\n"
"	seedValue.s1 = task->seed.s1;\n"
"	seedValue.s2 = task->seed.s2;\n"
"	seedValue.s3 = task->seed.s3;\n"
"	// This trick is required by Sampler_GetSample() macro\n"
"	Seed *seed = &seedValue;\n"
"\n"
"	// Initialize image maps page pointer table\n"
"	INIT_IMAGEMAPS_PAGES\n"
"\n"
"	//--------------------------------------------------------------------------\n"
"\n"
"	__global Ray *ray = &rays[gid];\n"
"	__global RayHit *rayHit = &rayHits[gid];\n"
"#if defined(PARAM_FILM_CHANNELS_HAS_RAYCOUNT)\n"
"	sample->result.rayCount += 1;\n"
"#endif\n"
"\n"
"	//--------------------------------------------------------------------------\n"
"	// Evaluation of the Path finite state machine.\n"
"	//\n"
"	// From: RT_NEXT_VERTEX\n"
"	// To: SPLAT_SAMPLE or GENERATE_DL_RAY\n"
"	//--------------------------------------------------------------------------\n"
"\n"
"	if (pathState == RT_NEXT_VERTEX) {\n"
"		float3 connectionThroughput;\n"
"		const bool continueToTrace = Scene_Intersect(\n"
"#if defined(PARAM_HAS_VOLUMES)\n"
"			&pathVolInfos[gid],\n"
"			&task->tmpHitPoint,\n"
"#endif\n"
"#if defined(PARAM_HAS_PASSTHROUGH)\n"
"			taskState->bsdf.hitPoint.passThroughEvent,\n"
"#endif\n"
"			ray, rayHit, bsdf,\n"
"			&connectionThroughput, VLOAD3F(taskState->throughput.c),\n"
"			&sample->result,\n"
"			// BSDF_Init parameters\n"
"			meshDescs,\n"
"			meshMats,\n"
"#if (PARAM_TRIANGLE_LIGHT_COUNT > 0)\n"
"			meshTriLightDefsOffset,\n"
"#endif\n"
"			vertices,\n"
"#if defined(PARAM_HAS_NORMALS_BUFFER)\n"
"			vertNormals,\n"
"#endif\n"
"#if defined(PARAM_HAS_UVS_BUFFER)\n"
"			vertUVs,\n"
"#endif\n"
"#if defined(PARAM_HAS_COLS_BUFFER)\n"
"			vertCols,\n"
"#endif\n"
"#if defined(PARAM_HAS_ALPHAS_BUFFER)\n"
"			vertAlphas,\n"
"#endif\n"
"			triangles\n"
"			MATERIALS_PARAM\n"
"			);\n"
"		VSTORE3F(connectionThroughput * VLOAD3F(taskState->throughput.c), taskState->throughput.c);\n"
"		const bool rayMiss = (rayHit->meshIndex == NULL_INDEX);\n"
"\n"
"		// If continueToTrace, there is nothing to do, just keep the same state\n"
"		if (!continueToTrace) {\n"
"			if (!rayMiss) {\n"
"				//--------------------------------------------------------------\n"
"				// Something was hit\n"
"				//--------------------------------------------------------------\n"
"\n"
"				if (depth == 1) {\n"
"#if defined(PARAM_FILM_CHANNELS_HAS_ALPHA)\n"
"					sample->result.alpha = 1.f;\n"
"#endif\n"
"#if defined(PARAM_FILM_CHANNELS_HAS_DEPTH)\n"
"					sample->result.depth = rayHit->t;\n"
"#endif\n"
"#if defined(PARAM_FILM_CHANNELS_HAS_POSITION)\n"
"					sample->result.position = bsdf->hitPoint.p;\n"
"#endif\n"
"#if defined(PARAM_FILM_CHANNELS_HAS_GEOMETRY_NORMAL)\n"
"					sample->result.geometryNormal = bsdf->hitPoint.geometryN;\n"
"#endif\n"
"#if defined(PARAM_FILM_CHANNELS_HAS_SHADING_NORMAL)\n"
"					sample->result.shadingNormal = bsdf->hitPoint.shadeN;\n"
"#endif\n"
"#if defined(PARAM_FILM_CHANNELS_HAS_MATERIAL_ID)\n"
"					sample->result.materialID = BSDF_GetMaterialID(bsdf\n"
"							MATERIALS_PARAM);\n"
"#endif\n"
"#if defined(PARAM_FILM_CHANNELS_HAS_UV)\n"
"					sample->result.uv = bsdf->hitPoint.uv;\n"
"#endif\n"
"				}\n"
"\n"
"#if (PARAM_TRIANGLE_LIGHT_COUNT > 0)\n"
"				// Check if it is a light source (note: I can hit only triangle area light sources)\n"
"				if (BSDF_IsLightSource(bsdf)) {\n"
"					DirectHitFiniteLight(\n"
"							taskDirectLight->lastBSDFEvent,\n"
"							&taskState->throughput,\n"
"							rayHit->t, bsdf, taskDirectLight->lastPdfW,\n"
"							&sample->result\n"
"							LIGHTS_PARAM);\n"
"				}\n"
"#endif\n"
"\n"
"				// Check if this is the last path vertex (but not also the first)\n"
"				//\n"
"				// I handle as a special case when the path vertex is both the first\n"
"				// and the last: I do direct light sampling without MIS.\n"
"				if (sample->result.lastPathVertex && !sample->result.firstPathVertex)\n"
"					pathState = SPLAT_SAMPLE;\n"
"				else {\n"
"					// Direct light sampling\n"
"					pathState = GENERATE_DL_RAY;\n"
"				}\n"
"			} else {\n"
"				//--------------------------------------------------------------\n"
"				// Nothing was hit, add environmental lights radiance\n"
"				//--------------------------------------------------------------\n"
"\n"
"#if defined(PARAM_HAS_ENVLIGHTS)\n"
"				DirectHitInfiniteLight(\n"
"						taskDirectLight->lastBSDFEvent,\n"
"						&taskState->throughput,\n"
"						VLOAD3F(&ray->d.x), taskDirectLight->lastPdfW,\n"
"						&sample->result\n"
"						LIGHTS_PARAM);\n"
"#endif\n"
"\n"
"				if (depth == 1) {\n"
"#if defined(PARAM_FILM_CHANNELS_HAS_ALPHA)\n"
"					sample->result.alpha = 0.f;\n"
"#endif\n"
"#if defined(PARAM_FILM_CHANNELS_HAS_DEPTH)\n"
"					sample->result.depth = INFINITY;\n"
"#endif\n"
"#if defined(PARAM_FILM_CHANNELS_HAS_POSITION)\n"
"					sample->result.position.x = INFINITY;\n"
"					sample->result.position.y = INFINITY;\n"
"					sample->result.position.z = INFINITY;\n"
"#endif\n"
"#if defined(PARAM_FILM_CHANNELS_HAS_GEOMETRY_NORMAL)\n"
"					sample->result.geometryNormal.x = INFINITY;\n"
"					sample->result.geometryNormal.y = INFINITY;\n"
"					sample->result.geometryNormal.z = INFINITY;\n"
"#endif\n"
"#if defined(PARAM_FILM_CHANNELS_HAS_SHADING_NORMAL)\n"
"					sample->result.shadingNormal.x = INFINITY;\n"
"					sample->result.shadingNormal.y = INFINITY;\n"
"					sample->result.shadingNormal.z = INFINITY;\n"
"#endif\n"
"#if defined(PARAM_FILM_CHANNELS_HAS_MATERIAL_ID)\n"
"					sample->result.materialID = NULL_INDEX;\n"
"#endif\n"
"#if defined(PARAM_FILM_CHANNELS_HAS_UV)\n"
"					sample->result.uv.u = INFINITY;\n"
"					sample->result.uv.v = INFINITY;\n"
"#endif\n"
"				}\n"
"\n"
"				pathState = SPLAT_SAMPLE;\n"
"			}\n"
"		}\n"
"#if defined(PARAM_HAS_PASSTHROUGH)\n"
"		else {\n"
"			// I generate a new random variable starting from the previous one. I'm\n"
"			// not really sure about the kind of correlation introduced by this\n"
"			// trick.\n"
"			taskState->bsdf.hitPoint.passThroughEvent = fabs(taskState->bsdf.hitPoint.passThroughEvent - .5f) * 2.f;\n"
"		}\n"
"#endif\n"
"	}\n"
"\n"
"	//--------------------------------------------------------------------------\n"
"	// Evaluation of the Path finite state machine.\n"
"	//\n"
"	// From: RT_DL\n"
"	// To: GENERATE_NEXT_VERTEX_RAY\n"
"	//--------------------------------------------------------------------------\n"
"\n"
"	if (pathState == RT_DL) {\n"
"#if defined(PARAM_HAS_PASSTHROUGH) || defined(PARAM_HAS_VOLUMES)\n"
"		float3 connectionThroughput = WHITE;\n"
"		const bool continueToTrace = \n"
"			Scene_Intersect(\n"
"#if defined(PARAM_HAS_VOLUMES)\n"
"				&directLightVolInfos[gid],\n"
"				&task->tmpHitPoint,\n"
"#endif\n"
"#if defined(PARAM_HAS_PASSTHROUGH)\n"
"				taskDirectLight->rayPassThroughEvent,\n"
"#endif\n"
"				ray, rayHit, &task->tmpBsdf,\n"
"				&connectionThroughput, WHITE,\n"
"				NULL,\n"
"				// BSDF_Init parameters\n"
"				meshDescs,\n"
"				meshMats,\n"
"#if (PARAM_TRIANGLE_LIGHT_COUNT > 0)\n"
"				meshTriLightDefsOffset,\n"
"#endif\n"
"				vertices,\n"
"#if defined(PARAM_HAS_NORMALS_BUFFER)\n"
"				vertNormals,\n"
"#endif\n"
"#if defined(PARAM_HAS_UVS_BUFFER)\n"
"				vertUVs,\n"
"#endif\n"
"#if defined(PARAM_HAS_COLS_BUFFER)\n"
"				vertCols,\n"
"#endif\n"
"#if defined(PARAM_HAS_ALPHAS_BUFFER)\n"
"				vertAlphas,\n"
"#endif\n"
"				triangles\n"
"				MATERIALS_PARAM\n"
"				);\n"
"		VSTORE3F(connectionThroughput * VLOAD3F(taskDirectLight->illumInfo.lightRadiance.c), taskDirectLight->illumInfo.lightRadiance.c);\n"
"#if defined(PARAM_FILM_CHANNELS_HAS_IRRADIANCE)\n"
"		VSTORE3F(connectionThroughput * VLOAD3F(taskDirectLight->illumInfo.lightIrradiance.c), taskDirectLight->illumInfo.lightIrradiance.c);\n"
"#endif\n"
"#else\n"
"	const bool continueToTrace = false;\n"
"#endif\n"
"\n"
"		const bool rayMiss = (rayHit->meshIndex == NULL_INDEX);\n"
"\n"
"		// If continueToTrace, there is nothing to do, just keep the same state\n"
"		if (!continueToTrace) {\n"
"			if (rayMiss) {\n"
"				// Nothing was hit, the light source is visible\n"
"\n"
"				const float3 incomingRadiance = VLOAD3F(taskDirectLight->illumInfo.lightRadiance.c);\n"
"				SampleResult_AddDirectLight(&sample->result, taskDirectLight->illumInfo.lightID,\n"
"						BSDF_GetEventTypes(bsdf\n"
"							MATERIALS_PARAM),\n"
"						VLOAD3F(taskState->throughput.c), incomingRadiance,\n"
"						1.f);\n"
"\n"
"#if defined(PARAM_FILM_CHANNELS_HAS_IRRADIANCE)\n"
"				// The first path vertex is not handled by AddDirectLight(). This is valid\n"
"				// for irradiance AOV only if it is not a SPECULAR material.\n"
"				//\n"
"				// Note: irradiance samples the light sources only here (i.e. no\n"
"				// direct hit, no MIS, it would be useless)\n"
"				if ((sample->result.firstPathVertex) && !(BSDF_GetEventTypes(&taskState->bsdf\n"
"							MATERIALS_PARAM) & SPECULAR)) {\n"
"					const float3 irradiance = (M_1_PI_F * fabs(dot(\n"
"								VLOAD3F(&taskState->bsdf.hitPoint.shadeN.x),\n"
"								VLOAD3F(&rays[gid].d.x)))) *\n"
"							VLOAD3F(taskDirectLight->illumInfo.lightIrradiance.c);\n"
"					VSTORE3F(irradiance, sample->result.irradiance.c);\n"
"				}\n"
"#endif\n"
"			}\n"
"\n"
"			// Check if this is the last path vertex\n"
"			if (sample->result.lastPathVertex)\n"
"				pathState = SPLAT_SAMPLE;\n"
"			else\n"
"				pathState = GENERATE_NEXT_VERTEX_RAY;\n"
"		}\n"
"#if defined(PARAM_HAS_PASSTHROUGH)\n"
"		else {\n"
"			// I generate a new random variable starting from the previous one. I'm\n"
"			// not really sure about the kind of correlation introduced by this\n"
"			// trick.\n"
"			taskDirectLight->rayPassThroughEvent = fabs(taskDirectLight->rayPassThroughEvent - .5f) * 2.f;\n"
"		}\n"
"#endif\n"
"	}\n"
"\n"
"	//--------------------------------------------------------------------------\n"
"	// Evaluation of the Path finite state machine.\n"
"	//\n"
"	// From: GENERATE_DL_RAY\n"
"	// To: GENERATE_NEXT_VERTEX_RAY or RT_DL or SPLAT_SAMPLE\n"
"	//--------------------------------------------------------------------------\n"
"\n"
"	if (pathState == GENERATE_DL_RAY) {\n"
"		if (!BSDF_IsDelta(bsdf\n"
"				MATERIALS_PARAM) &&\n"
"			DirectLightSampling_ONE(\n"
"				&taskDirectLight->illumInfo,\n"
"#if defined(PARAM_HAS_INFINITELIGHTS)\n"
"				worldCenterX, worldCenterY, worldCenterZ, worldRadius,\n"
"#endif\n"
"#if (PARAM_TRIANGLE_LIGHT_COUNT > 0)\n"
"				&task->tmpHitPoint,\n"
"#endif\n"
"				ray->time,\n"
"				Sampler_GetSamplePathVertex(depth, IDX_DIRECTLIGHT_X),\n"
"				Sampler_GetSamplePathVertex(depth, IDX_DIRECTLIGHT_Y),\n"
"				Sampler_GetSamplePathVertex(depth, IDX_DIRECTLIGHT_Z),\n"
"#if defined(PARAM_HAS_PASSTHROUGH)\n"
"				Sampler_GetSamplePathVertex(depth, IDX_DIRECTLIGHT_W),\n"
"#endif\n"
"				sample->result.lastPathVertex, depth,\n"
"				bsdf, ray\n"
"				LIGHTS_PARAM)) {\n"
"#if defined(PARAM_HAS_PASSTHROUGH)\n"
"			// Initialize the pass-through event for the shadow ray\n"
"			taskDirectLight->rayPassThroughEvent = Sampler_GetSamplePathVertex(depth, IDX_DIRECTLIGHT_A);\n"
"#endif\n"
"#if defined(PARAM_HAS_VOLUMES)\n"
"			// Make a copy of current PathVolumeInfo for tracing the\n"
"			// shadow ray\n"
"			directLightVolInfos[gid] = pathVolInfos[gid];\n"
"#endif\n"
"			// I have to trace the shadow ray\n"
"			pathState = RT_DL;\n"
"		} else {\n"
"			// No shadow ray to trace, move to the next vertex ray\n"
"			// however, I have to Check if this is the last path vertex\n"
"			if (sample->result.lastPathVertex)\n"
"				pathState = SPLAT_SAMPLE;\n"
"			else\n"
"				pathState = GENERATE_NEXT_VERTEX_RAY;\n"
"		}\n"
"	}\n"
"\n"
"	//--------------------------------------------------------------------------\n"
"	// Evaluation of the Path finite state machine.\n"
"	//\n"
"	// From: GENERATE_NEXT_VERTEX_RAY\n"
"	// To: SPLAT_SAMPLE or RT_NEXT_VERTEX\n"
"	//--------------------------------------------------------------------------\n"
"\n"
"	if (pathState == GENERATE_NEXT_VERTEX_RAY) {\n"
"		// Sample the BSDF\n"
"		__global BSDF *bsdf = &taskState->bsdf;\n"
"		float3 sampledDir;\n"
"		float lastPdfW;\n"
"		float cosSampledDir;\n"
"		BSDFEvent event;\n"
"\n"
"		const float3 bsdfSample = BSDF_Sample(bsdf,\n"
"				Sampler_GetSamplePathVertex(depth, IDX_BSDF_X),\n"
"				Sampler_GetSamplePathVertex(depth, IDX_BSDF_Y),\n"
"				&sampledDir, &lastPdfW, &cosSampledDir, &event, ALL\n"
"				MATERIALS_PARAM);\n"
"\n"
"		// Russian Roulette\n"
"		const bool rrEnabled = (depth >= PARAM_RR_DEPTH) && !(event & SPECULAR);\n"
"		const float rrProb = rrEnabled ? RussianRouletteProb(bsdfSample) : 1.f;\n"
"		const bool rrContinuePath = !rrEnabled || (Sampler_GetSamplePathVertex(depth, IDX_RR) < rrProb);\n"
"\n"
"		// Max. path depth\n"
"		const bool maxPathDepth = (depth >= PARAM_MAX_PATH_DEPTH);\n"
"\n"
"		const bool continuePath = !Spectrum_IsBlack(bsdfSample) && rrContinuePath && !maxPathDepth;\n"
"		if (continuePath) {\n"
"			lastPdfW *= rrProb; // Russian Roulette\n"
"			const float pdfFactor = (event & SPECULAR) ? 1.f : min(1.f, lastPdfW / PARAM_PDF_CLAMP_VALUE);\n"
"			const float3 throughputFactor = bsdfSample * pdfFactor;\n"
"\n"
"			VSTORE3F(throughputFactor * VLOAD3F(taskState->throughput.c), taskState->throughput.c);\n"
"\n"
"#if defined(PARAM_FILM_CHANNELS_HAS_IRRADIANCE)\n"
"		// This is valid for irradiance AOV only if it is not a SPECULAR material and\n"
"		// first path vertex. Set or update sampleResult.irradiancePathThroughput\n"
"		if (sample->result.firstPathVertex) {\n"
"			if (!(BSDF_GetEventTypes(&taskState->bsdf\n"
"						MATERIALS_PARAM) & SPECULAR))\n"
"				VSTORE3F(M_1_PI_F * fabs(dot(\n"
"						VLOAD3F(&bsdf->hitPoint.shadeN.x),\n"
"						sampledDir)) / rrProb,\n"
"						sample->result.irradiancePathThroughput.c);\n"
"			else\n"
"				VSTORE3F(BLACK, sample->result.irradiancePathThroughput.c);\n"
"		} else\n"
"			VSTORE3F(throughputFactor * VLOAD3F(sample->result.irradiancePathThroughput.c), sample->result.irradiancePathThroughput.c);\n"
"#endif\n"
"\n"
"#if defined(PARAM_HAS_VOLUMES)\n"
"			// Update volume information\n"
"			PathVolumeInfo_Update(&pathVolInfos[gid], event, bsdf\n"
"					MATERIALS_PARAM);\n"
"#endif\n"
"\n"
"			Ray_Init2(ray, VLOAD3F(&bsdf->hitPoint.p.x), sampledDir, ray->time);\n"
"\n"
"			++depth;\n"
"			sample->result.firstPathVertex = false;\n"
"			sample->result.lastPathVertex = (depth == PARAM_MAX_PATH_DEPTH);\n"
"\n"
"			if (sample->result.firstPathVertex)\n"
"				sample->result.firstPathVertexEvent = event;\n"
"\n"
"			taskState->depth = depth;\n"
"			taskDirectLight->lastBSDFEvent = event;\n"
"			taskDirectLight->lastPdfW = lastPdfW;\n"
"#if defined(PARAM_HAS_PASSTHROUGH)\n"
"			// This is a bit tricky. I store the passThroughEvent in the BSDF\n"
"			// before of the initialization because it can be use during the\n"
"			// tracing of next path vertex ray.\n"
"\n"
"			// This sampleDataPathVertexBase is used inside Sampler_GetSamplePathVertex() macro\n"
"			__global float *sampleDataPathVertexBase = Sampler_GetSampleDataPathVertex(\n"
"				sample, sampleDataPathBase, depth);\n"
"			taskState->bsdf.hitPoint.passThroughEvent = Sampler_GetSamplePathVertex(depth, IDX_PASSTHROUGH);\n"
"#endif\n"
"\n"
"			pathState = RT_NEXT_VERTEX;\n"
"		} else\n"
"			pathState = SPLAT_SAMPLE;\n"
"	}\n"
"\n"
"	//--------------------------------------------------------------------------\n"
"	// Evaluation of the Path finite state machine.\n"
"	//\n"
"	// From: SPLAT_SAMPLE\n"
"	// To: RT_NEXT_VERTEX\n"
"	//--------------------------------------------------------------------------\n"
"\n"
"	if (pathState == SPLAT_SAMPLE) {	\n"
"		// Initialize Film radiance group pointer table\n"
"		__global float *filmRadianceGroup[PARAM_FILM_RADIANCE_GROUP_COUNT];\n"
"#if defined(PARAM_FILM_RADIANCE_GROUP_0)\n"
"		filmRadianceGroup[0] = filmRadianceGroup0;\n"
"#endif\n"
"#if defined(PARAM_FILM_RADIANCE_GROUP_1)\n"
"		filmRadianceGroup[1] = filmRadianceGroup1;\n"
"#endif\n"
"#if defined(PARAM_FILM_RADIANCE_GROUP_2)\n"
"		filmRadianceGroup[2] = filmRadianceGroup2;\n"
"#endif\n"
"#if defined(PARAM_FILM_RADIANCE_GROUP_3)\n"
"		filmRadianceGroup[3] = filmRadianceGroup3;\n"
"#endif\n"
"#if defined(PARAM_FILM_RADIANCE_GROUP_4)\n"
"		filmRadianceGroup[4] = filmRadianceGroup4;\n"
"#endif\n"
"#if defined(PARAM_FILM_RADIANCE_GROUP_5)\n"
"		filmRadianceGroup[5] = filmRadianceGroup5;\n"
"#endif\n"
"#if defined(PARAM_FILM_RADIANCE_GROUP_6)\n"
"		filmRadianceGroup[6] = filmRadianceGroup6;\n"
"#endif\n"
"#if defined(PARAM_FILM_RADIANCE_GROUP_7)\n"
"		filmRadianceGroup[7] = filmRadianceGroup7;\n"
"#endif\n"
"\n"
"		if (PARAM_RADIANCE_CLAMP_MAXVALUE > 0.f) {\n"
"			// Radiance clamping\n"
"			SampleResult_ClampRadiance(&sample->result, PARAM_RADIANCE_CLAMP_MAXVALUE);\n"
"		}\n"
"\n"
"		Sampler_SplatSample(&seedValue, sample, sampleData\n"
"			FILM_PARAM);\n"
"		Sampler_NextSample(seed, sample, sampleData, filmWidth, filmHeight);\n"
"		taskStats[gid].sampleCount += 1;\n"
"\n"
"		GenerateCameraPath(taskDirectLight, taskState, sample, sampleData, camera, filmWidth, filmHeight, ray, seed);\n"
"		// taskState->state is set to RT_NEXT_VERTEX inside Sampler_NextSample() => GenerateCameraPath()\n"
"		\n"
"		// Re-initialize the volume information\n"
"#if defined(PARAM_HAS_VOLUMES)\n"
"		PathVolumeInfo_Init(&pathVolInfos[gid]);\n"
"#endif\n"
"	} else {\n"
"		// Save the state\n"
"		taskState->state = pathState;\n"
"	}\n"
"\n"
"	//--------------------------------------------------------------------------\n"
"\n"
"	// Save the seed\n"
"	task->seed.s1 = seed->s1;\n"
"	task->seed.s2 = seed->s2;\n"
"	task->seed.s3 = seed->s3;\n"
"}\n"
; } }
