#include <string>
namespace slg { namespace ocl {
std::string KernelSource_biaspathocl_datatypes = 
"#line 2 \"biaspathocl_datatypes.cl\"\n"
"\n"
"/***************************************************************************\n"
" * Copyright 1998-2013 by authors (see AUTHORS.txt)                        *\n"
" *                                                                         *\n"
" *   This file is part of LuxRender.                                       *\n"
" *                                                                         *\n"
" * Licensed under the Apache License, Version 2.0 (the \"License\");         *\n"
" * you may not use this file except in compliance with the License.        *\n"
" * You may obtain a copy of the License at                                 *\n"
" *                                                                         *\n"
" *     http://www.apache.org/licenses/LICENSE-2.0                          *\n"
" *                                                                         *\n"
" * Unless required by applicable law or agreed to in writing, software     *\n"
" * distributed under the License is distributed on an \"AS IS\" BASIS,       *\n"
" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.*\n"
" * See the License for the specific language governing permissions and     *\n"
" * limitations under the License.                                          *\n"
" ***************************************************************************/\n"
"\n"
"//------------------------------------------------------------------------------\n"
"// Some OpenCL specific definition\n"
"//------------------------------------------------------------------------------\n"
"\n"
"#if defined(SLG_OPENCL_KERNEL)\n"
"\n"
"#if defined(PARAM_USE_PIXEL_ATOMICS)\n"
"#pragma OPENCL EXTENSION cl_khr_global_int32_base_atomics : enable\n"
"#endif\n"
"\n"
"#ifndef TRUE\n"
"#define TRUE 1\n"
"#endif\n"
"\n"
"#ifndef FALSE\n"
"#define FALSE 0\n"
"#endif\n"
"\n"
"#endif\n"
"\n"
"//------------------------------------------------------------------------------\n"
"// GPUTask data types\n"
"//------------------------------------------------------------------------------\n"
"\n"
"#define NEXT_VERTEX_TRACE_RAY (1<<0)\n"
"#define NEXT_VERTEX_GENERATE_RAY (1<<1)\n"
"#define DIRECT_LIGHT_TRACE_RAY (1<<2)\n"
"#define DIRECT_LIGHT_GENERATE_RAY (1<<3)\n"
"#define LOW_STATE_MASK 0xffff\n"
"\n"
"#define PATH_VERTEX_1 (1<<16)\n"
"#define PATH_VERTEX_N (1<<17)\n"
"#define DONE (1<<18)\n"
"#define HIGH_STATE_MASK 0xffff0000\n"
"\n"
"// This is defined only under OpenCL because of variable size structures\n"
"#if defined(SLG_OPENCL_KERNEL)\n"
"\n"
"typedef struct {\n"
"	// The task seed\n"
"	Seed seed;\n"
"\n"
"	Spectrum throughputPathVertex1;\n"
"	BSDF bsdfPathVertex1;\n"
"} GPUTask;\n"
"\n"
"typedef struct {\n"
"#if defined(PARAM_DIRECT_LIGHT_ALL_STRATEGY)\n"
"	unsigned int lightIndex, lightSampleIndex;\n"
"#endif\n"
"\n"
"	Spectrum directLightThroughput;\n"
"	BSDF directLightBSDF;\n"
"#if (PARAM_TRIANGLE_LIGHT_COUNT > 0)\n"
"	// This is used by TriangleLight_Illuminate() to temporary store the\n"
"	// point on the light sources\n"
"	HitPoint directLightHitPoint;\n"
"#endif\n"
"\n"
"	// Direct light sampling. Radiance to add to the result\n"
"	// if light source is visible.\n"
"	Spectrum lightRadiance;\n"
"	unsigned int lightID;\n"
"} GPUTaskDirectLight;\n"
"\n"
"typedef struct {\n"
"	// DIFFUSE, GLOSSY and SPECULAR BSDF sampling\n"
"	BSDFEvent vertex1SampleComponent;\n"
"	unsigned int vertex1SampleIndex;\n"
"\n"
"	Spectrum throughputPathVertexN;\n"
"	BSDF bsdfPathVertexN;\n"
"} GPUTaskPathVertexN;\n"
"\n"
"#endif\n"
"\n"
"typedef struct {\n"
"	unsigned int raysCount;\n"
"} GPUTaskStats;\n"
; } }
