#include <string>
namespace slg { namespace ocl {
std::string KernelSource_material_funcs = 
"#line 2 \"material_funcs.cl\"\n"
"\n"
"/***************************************************************************\n"
" * Copyright 1998-2015 by authors (see AUTHORS.txt)                        *\n"
" *                                                                         *\n"
" *   This file is part of LuxRender.                                       *\n"
" *                                                                         *\n"
" * Licensed under the Apache License, Version 2.0 (the \"License\");         *\n"
" * you may not use this file except in compliance with the License.        *\n"
" * You may obtain a copy of the License at                                 *\n"
" *                                                                         *\n"
" *     http://www.apache.org/licenses/LICENSE-2.0                          *\n"
" *                                                                         *\n"
" * Unless required by applicable law or agreed to in writing, software     *\n"
" * distributed under the License is distributed on an \"AS IS\" BASIS,       *\n"
" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.*\n"
" * See the License for the specific language governing permissions and     *\n"
" * limitations under the License.                                          *\n"
" ***************************************************************************/\n"
"\n"
"//------------------------------------------------------------------------------\n"
"// Generic material functions\n"
"//\n"
"// They include the support for all material but Mix\n"
"// (because OpenCL doesn't support recursion)\n"
"//------------------------------------------------------------------------------\n"
"\n"
"float3 Material_GetEmittedRadianceNoMix(__global const Material *material, __global HitPoint *hitPoint\n"
"		TEXTURES_PARAM_DECL) {\n"
"	const uint emitTexIndex = material->emitTexIndex;\n"
"	if (emitTexIndex == NULL_INDEX)\n"
"		return BLACK;\n"
"\n"
"	return\n"
"#if defined(PARAM_TRIANGLE_LIGHT_HAS_VERTEX_COLOR)\n"
"		VLOAD3F(hitPoint->color.c) *\n"
"#endif\n"
"		Texture_GetSpectrumValue(emitTexIndex, hitPoint\n"
"				TEXTURES_PARAM);\n"
"}\n"
"\n"
"#if defined(PARAM_HAS_BUMPMAPS)\n"
"void Material_BumpNoMix(__global const Material *material, __global HitPoint *hitPoint,\n"
"        const float3 dpdu, const float3 dpdv,\n"
"        const float3 dndu, const float3 dndv, const float weight\n"
"        TEXTURES_PARAM_DECL) {\n"
"    if ((material->bumpTexIndex != NULL_INDEX) && (weight > 0.f)) {\n"
"        const float2 duv = weight * \n"
"#if defined(PARAM_ENABLE_TEX_NORMALMAP)\n"
"            ((texs[material->bumpTexIndex].type == NORMALMAP_TEX) ?\n"
"                NormalMapTexture_GetDuv(material->bumpTexIndex,\n"
"                    hitPoint, dpdu, dpdv, dndu, dndv, material->bumpSampleDistance\n"
"                    TEXTURES_PARAM) :\n"
"                Texture_GetDuv(material->bumpTexIndex,\n"
"                    hitPoint, dpdu, dpdv, dndu, dndv, material->bumpSampleDistance\n"
"                    TEXTURES_PARAM));\n"
"#else\n"
"            Texture_GetDuv(material->bumpTexIndex,\n"
"                hitPoint, dpdu, dpdv, dndu, dndv, material->bumpSampleDistance\n"
"                TEXTURES_PARAM);\n"
"#endif\n"
"\n"
"        const float3 oldShadeN = VLOAD3F(&hitPoint->shadeN.x);\n"
"        const float3 bumpDpdu = dpdu + duv.s0 * oldShadeN;\n"
"        const float3 bumpDpdv = dpdv + duv.s1 * oldShadeN;\n"
"        float3 newShadeN = normalize(cross(bumpDpdu, bumpDpdv));\n"
"\n"
"        // The above transform keeps the normal in the original normal\n"
"        // hemisphere. If they are opposed, it means UVN was indirect and\n"
"        // the normal needs to be reversed\n"
"        newShadeN *= (dot(oldShadeN, newShadeN) < 0.f) ? -1.f : 1.f;\n"
"\n"
"        VSTORE3F(newShadeN, &hitPoint->shadeN.x);\n"
"    }\n"
"}\n"
"#endif\n"
"\n"
"#if defined(PARAM_HAS_VOLUMES)\n"
"uint Material_GetInteriorVolumeNoMix(__global const Material *material) {\n"
"	return material->interiorVolumeIndex;\n"
"}\n"
"\n"
"uint Material_GetExteriorVolumeNoMix(__global const Material *material) {\n"
"	return material->exteriorVolumeIndex;\n"
"}\n"
"#endif\n"
"\n"
; } }
