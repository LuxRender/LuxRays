#include <string>
namespace luxrays { namespace ocl {
std::string KernelSource_matrix4x4_funcs = 
"#line 2 \"matrix4x4_funcs.cl\"\n"
"\n"
"/***************************************************************************\n"
" * Copyright 1998-2013 by authors (see AUTHORS.txt)                        *\n"
" *                                                                         *\n"
" *   This file is part of LuxRender.                                       *\n"
" *                                                                         *\n"
" * Licensed under the Apache License, Version 2.0 (the \"License\");         *\n"
" * you may not use this file except in compliance with the License.        *\n"
" * You may obtain a copy of the License at                                 *\n"
" *                                                                         *\n"
" *     http://www.apache.org/licenses/LICENSE-2.0                          *\n"
" *                                                                         *\n"
" * Unless required by applicable law or agreed to in writing, software     *\n"
" * distributed under the License is distributed on an \"AS IS\" BASIS,       *\n"
" * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.*\n"
" * See the License for the specific language governing permissions and     *\n"
" * limitations under the License.                                          *\n"
" ***************************************************************************/\n"
"\n"
"float3 Matrix4x4_ApplyPoint(__global Matrix4x4 *m, const float3 point) {\n"
"	const float4 point4 = (float4)(point.x, point.y, point.z, 1.f);\n"
"\n"
"	const float4 row3 = VLOAD4F(&m->m[3][0]);\n"
"	const float iw = 1.f / dot(row3, point4);\n"
"\n"
"	const float4 row0 = VLOAD4F(&m->m[0][0]);\n"
"	const float4 row1 = VLOAD4F(&m->m[1][0]);\n"
"	const float4 row2 = VLOAD4F(&m->m[2][0]);\n"
"	return (float3)(\n"
"			iw * dot(row0, point4),\n"
"			iw * dot(row1, point4),\n"
"			iw * dot(row2, point4)\n"
"			);\n"
"}\n"
"\n"
"float3 Matrix4x4_ApplyVector(__global Matrix4x4 *m, const float3 vector) {\n"
"	const float3 row0 = VLOAD3F(&m->m[0][0]);\n"
"	const float3 row1 = VLOAD3F(&m->m[1][0]);\n"
"	const float3 row2 = VLOAD3F(&m->m[2][0]);\n"
"	return (float3)(\n"
"			dot(row0, vector),\n"
"			dot(row1, vector),\n"
"			dot(row2, vector)\n"
"			);\n"
"}\n"
"\n"
"float3 Matrix4x4_ApplyNormal(__global Matrix4x4 *m, const float3 normal) {\n"
"	const float3 row0 = (float3)(m->m[0][0], m->m[1][0], m->m[2][0]);\n"
"	const float3 row1 = (float3)(m->m[0][1], m->m[1][1], m->m[2][1]);\n"
"	const float3 row2 = (float3)(m->m[0][2], m->m[1][2], m->m[2][2]);\n"
"	return (float3)(\n"
"			dot(row0, normal),\n"
"			dot(row1, normal),\n"
"			dot(row2, normal)\n"
"			);\n"
"}\n"
; } }
