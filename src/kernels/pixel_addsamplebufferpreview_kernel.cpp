#include "luxrays/kernels/kernels.h"
std::string luxrays::KernelSource_Pixel_AddSampleBufferPreview = 
"/***************************************************************************\n"
" *   Copyright (C) 1998-2010 by authors (see AUTHORS.txt )                 *\n"
" *                                                                         *\n"
" *   This file is part of LuxRays.                                         *\n"
" *                                                                         *\n"
" *   LuxRays is free software; you can redistribute it and/or modify       *\n"
" *   it under the terms of the GNU General Public License as published by  *\n"
" *   the Free Software Foundation; either version 3 of the License, or     *\n"
" *   (at your option) any later version.                                   *\n"
" *                                                                         *\n"
" *   LuxRays is distributed in the hope that it will be useful,            *\n"
" *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *\n"
" *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *\n"
" *   GNU General Public License for more details.                          *\n"
" *                                                                         *\n"
" *   You should have received a copy of the GNU General Public License     *\n"
" *   along with this program.  If not, see <http://www.gnu.org/licenses/>. *\n"
" *                                                                         *\n"
" *   LuxRays website: http://www.luxrender.net                             *\n"
" ***************************************************************************/\n"
"\n"
"#pragma OPENCL EXTENSION cl_khr_global_int32_base_atomics : enable\n"
"\n"
"typedef struct {\n"
"	float r, g, b;\n"
"} Spectrum;\n"
"\n"
"typedef struct {\n"
"	Spectrum radiance;\n"
"	float weight;\n"
"} SamplePixel;\n"
"\n"
"typedef struct {\n"
"	float screenX, screenY;\n"
"	Spectrum radiance;\n"
"} SampleBufferElem;\n"
"\n"
"void AtomicAdd(__global float *val, const float delta) {\n"
"	union {\n"
"		float f;\n"
"		unsigned int i;\n"
"	} oldVal;\n"
"	union {\n"
"		float f;\n"
"		unsigned int i;\n"
"	} newVal;\n"
"\n"
"	do {\n"
"		oldVal.f = *val;\n"
"		newVal.f = oldVal.f + delta;\n"
"	} while (atom_cmpxchg((__global unsigned int *)val, oldVal.i, newVal.i) != oldVal.i);\n"
"}\n"
"\n"
"static int Ceil2Int(const float val) {\n"
"	return (int)ceil(val);\n"
"}\n"
"\n"
"static int Floor2Int(const float val) {\n"
"	return (int)floor(val);\n"
"}\n"
"\n"
"__kernel void PixelAddSampleBufferPreview(\n"
"	const unsigned int width,\n"
"	const unsigned int height,\n"
"	__global SamplePixel *sampleFrameBuffer,\n"
"	const unsigned int sampleCount,\n"
"	__global SampleBufferElem *sampleBuff) {\n"
"	const unsigned int index = get_global_id(0);\n"
"	if (index >= sampleCount)\n"
"		return;\n"
"\n"
"	const int splatSize = 3;\n"
"	__global SampleBufferElem *sampleElem = &sampleBuff[index];\n"
"	const float dImageX = sampleElem->screenX - 0.5f;\n"
"	const float dImageY = sampleElem->screenY - 0.5f;\n"
"	int x0 = Ceil2Int(dImageX - splatSize);\n"
"	int x1 = Floor2Int(dImageX + splatSize);\n"
"	int y0 = Ceil2Int(dImageY - splatSize);\n"
"	int y1 = Floor2Int(dImageY + splatSize);\n"
"	if (x1 < x0 || y1 < y0 || x1 < 0 || y1 < 0)\n"
"		return;\n"
"\n"
"	x0 = max(x0, 0);\n"
"	x1 = min(x1, (int)width - 1);\n"
"	y0 = max(y0, 0);\n"
"	y1 = min(y1, (int)height - 1);\n"
"\n"
"	for (int y = y0; y <= y1; ++y) {\n"
"		for (int x = x0; x <= x1; ++x) {\n"
"			const unsigned int offset = x + y * width;\n"
"			__global SamplePixel *sp = &(sampleFrameBuffer[offset]);\n"
"\n"
"			/*AtomicAdd(&(sp->radiance.r), 0.01f * sampleElem->radiance.r);\n"
"			AtomicAdd(&(sp->radiance.g), 0.01f * sampleElem->radiance.g);\n"
"			AtomicAdd(&(sp->radiance.b), 0.01f * sampleElem->radiance.b);\n"
"\n"
"			AtomicAdd(&(sp->weight), 0.01f);*/\n"
"\n"
"			sp->radiance.r += 0.01f * sampleElem->radiance.r;\n"
"			sp->radiance.g += 0.01f * sampleElem->radiance.g;\n"
"			sp->radiance.b += 0.01f * sampleElem->radiance.b;\n"
"\n"
"			sp->weight += 0.01f;\n"
"		}\n"
"	}\n"
"}\n"
;
