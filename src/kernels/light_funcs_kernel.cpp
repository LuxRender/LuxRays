#include <string>
namespace luxrays { namespace ocl {
std::string KernelSource_light_funcs = 
"#line 2 \"light_funcs.cl\"\n"
"\n"
"/***************************************************************************\n"
" *   Copyright (C) 1998-2010 by authors (see AUTHORS.txt )                 *\n"
" *                                                                         *\n"
" *   This file is part of LuxRays.                                         *\n"
" *                                                                         *\n"
" *   LuxRays is free software; you can redistribute it and/or modify       *\n"
" *   it under the terms of the GNU General Public License as published by  *\n"
" *   the Free Software Foundation; either version 3 of the License, or     *\n"
" *   (at your option) any later version.                                   *\n"
" *                                                                         *\n"
" *   LuxRays is distributed in the hope that it will be useful,            *\n"
" *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *\n"
" *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *\n"
" *   GNU General Public License for more details.                          *\n"
" *                                                                         *\n"
" *   You should have received a copy of the GNU General Public License     *\n"
" *   along with this program.  If not, see <http://www.gnu.org/licenses/>. *\n"
" *                                                                         *\n"
" *   LuxRays website: http://www.luxrender.net                             *\n"
" ***************************************************************************/\n"
"\n"
"//------------------------------------------------------------------------------\n"
"// InfiniteLight\n"
"//------------------------------------------------------------------------------\n"
"\n"
"#if defined(PARAM_HAS_INFINITELIGHT)\n"
"\n"
"float3 InfiniteLight_GetRadiance(\n"
"	__global InfiniteLight *infiniteLight,\n"
"#if defined(PARAM_HAS_IMAGEMAPS)\n"
"	__global ImageMap *imageMapDescs,\n"
"#if defined(PARAM_IMAGEMAPS_PAGE_0)\n"
"	__global float *imageMapBuff0,\n"
"#endif\n"
"#if defined(PARAM_IMAGEMAPS_PAGE_1)\n"
"	__global float *imageMapBuff1,\n"
"#endif\n"
"#if defined(PARAM_IMAGEMAPS_PAGE_2)\n"
"	__global float *imageMapBuff2,\n"
"#endif\n"
"#if defined(PARAM_IMAGEMAPS_PAGE_3)\n"
"	__global float *imageMapBuff3,\n"
"#endif\n"
"#if defined(PARAM_IMAGEMAPS_PAGE_4)\n"
"	__global float *imageMapBuff4,\n"
"#endif\n"
"#endif\n"
"	const float3 dir) {\n"
"	const float2 uv = (float2)(\n"
"		1.f - SphericalPhi(-dir) * (1.f / (2.f * M_PI_F))+ infiniteLight->shiftU,\n"
"		SphericalTheta(-dir) * M_1_PI_F + infiniteLight->shiftV);\n"
"\n"
"	return vload3(0, &infiniteLight->gain.r) * ImageMapInstance_GetColor(\n"
"			&infiniteLight->imageMapInstance,\n"
"#if defined(PARAM_HAS_IMAGEMAPS)\n"
"			imageMapDescs,\n"
"#if defined(PARAM_IMAGEMAPS_PAGE_0)\n"
"			imageMapBuff0,\n"
"#endif\n"
"#if defined(PARAM_IMAGEMAPS_PAGE_1)\n"
"			imageMapBuff1,\n"
"#endif\n"
"#if defined(PARAM_IMAGEMAPS_PAGE_2)\n"
"			imageMapBuff2,\n"
"#endif\n"
"#if defined(PARAM_IMAGEMAPS_PAGE_3)\n"
"			imageMapBuff3,\n"
"#endif\n"
"#if defined(PARAM_IMAGEMAPS_PAGE_4)\n"
"			imageMapBuff4,\n"
"#endif\n"
"#endif\n"
"			uv);\n"
"}\n"
"\n"
"#endif\n"
"\n"
"//------------------------------------------------------------------------------\n"
"// TriangleLight\n"
"//------------------------------------------------------------------------------\n"
"\n"
"float3 TriangleLight_Illuminate(\n"
"		__global TriangleLight *triLight, __global Material *mats, __global Texture *texs,\n"
"		const float3 p, const float u0, const float u1, const float u2,\n"
"		float3 *dir, float *distance, float *directPdfW) {\n"
"	const float3 p0 = vload3(0, &triLight->v0.x);\n"
"	const float3 p1 = vload3(0, &triLight->v1.x);\n"
"	const float3 p2 = vload3(0, &triLight->v2.x);\n"
"	float b0, b1, b2;\n"
"	float3 samplePoint = Triangle_Sample(\n"
"			p0, p1, p2,\n"
"			u0, u1,\n"
"			&b0, &b1, &b2);\n"
"		\n"
"	const float3 sampleN = Triangle_GetGeometryNormal(p0, p1, p2); // Light sources are supposed to be flat\n"
"\n"
"	*dir = samplePoint - p;\n"
"	const float distanceSquared = dot(*dir, *dir);;\n"
"	*distance = sqrt(distanceSquared);\n"
"	*dir /= (*distance);\n"
"\n"
"	const float cosAtLight = dot(sampleN, -(*dir));\n"
"	if (cosAtLight < DEFAULT_COS_EPSILON_STATIC)\n"
"		return BLACK;\n"
"\n"
"	*directPdfW = triLight->invArea * distanceSquared / cosAtLight;\n"
"\n"
"	const float2 uv0 = vload2(0, &triLight->uv0.u);\n"
"	const float2 uv1 = vload2(0, &triLight->uv1.u);\n"
"	const float2 uv2 = vload2(0, &triLight->uv2.u);\n"
"	const float2 triUV = Triangle_InterpolateUV(uv0, uv1, uv2, b0, b1, b2);\n"
"\n"
"	return Material_GetEmittedRadiance(&mats[triLight->materialIndex], texs, triUV);\n"
"}\n"
"\n"
"float3 TriangleLight_GetRadiance(__global TriangleLight *triLight, __global Material *mats,\n"
"		 __global Texture *texs, const float3 dir, const float3 hitPointNormal,\n"
"		const float2 triUV, float *directPdfA) {\n"
"	const float cosOutLight = dot(hitPointNormal, dir);\n"
"	if (cosOutLight <= 0.f)\n"
"		return BLACK;\n"
"\n"
"	if (directPdfA)\n"
"		*directPdfA = triLight->invArea;\n"
"\n"
"	return Material_GetEmittedRadiance(&mats[triLight->materialIndex], texs, triUV);\n"
"}\n"
; } }
