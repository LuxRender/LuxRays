#include <string>
namespace luxrays { namespace ocl {
std::string KernelSource_light_funcs = 
"#line 2 \"light_funcs.cl\"\n"
"\n"
"/***************************************************************************\n"
" *   Copyright (C) 1998-2010 by authors (see AUTHORS.txt )                 *\n"
" *                                                                         *\n"
" *   This file is part of LuxRays.                                         *\n"
" *                                                                         *\n"
" *   LuxRays is free software; you can redistribute it and/or modify       *\n"
" *   it under the terms of the GNU General Public License as published by  *\n"
" *   the Free Software Foundation; either version 3 of the License, or     *\n"
" *   (at your option) any later version.                                   *\n"
" *                                                                         *\n"
" *   LuxRays is distributed in the hope that it will be useful,            *\n"
" *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *\n"
" *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *\n"
" *   GNU General Public License for more details.                          *\n"
" *                                                                         *\n"
" *   You should have received a copy of the GNU General Public License     *\n"
" *   along with this program.  If not, see <http://www.gnu.org/licenses/>. *\n"
" *                                                                         *\n"
" *   LuxRays website: http://www.luxrender.net                             *\n"
" ***************************************************************************/\n"
"\n"
"//------------------------------------------------------------------------------\n"
"// InfiniteLight\n"
"//------------------------------------------------------------------------------\n"
"\n"
"#if defined(PARAM_HAS_INFINITELIGHT)\n"
"\n"
"float3 InfiniteLight_GetRadiance(\n"
"	__global InfiniteLight *infiniteLight, const float3 dir\n"
"	IMAGEMAPS_PARAM_DECL) {\n"
"	const float2 uv = (float2)(\n"
"		1.f - SphericalPhi(-dir) * (1.f / (2.f * M_PI_F))+ infiniteLight->shiftU,\n"
"		SphericalTheta(-dir) * M_1_PI_F + infiniteLight->shiftV);\n"
"\n"
"	return vload3(0, &infiniteLight->gain.r) * ImageMapInstance_GetColor(\n"
"			&infiniteLight->imageMapInstance, uv\n"
"			IMAGEMAPS_PARAM);\n"
"}\n"
"\n"
"#endif\n"
"\n"
"//------------------------------------------------------------------------------\n"
"// SktLight\n"
"//------------------------------------------------------------------------------\n"
"\n"
"#if defined(PARAM_HAS_SKYLIGHT)\n"
"\n"
"float SkyLight_PerezBase(__global float *lam, const float theta, const float gamma) {\n"
"	return (1.f + lam[1] * exp(lam[2] / cos(theta))) *\n"
"		(1.f + lam[3] * exp(lam[4] * gamma)  + lam[5] * cos(gamma) * cos(gamma));\n"
"}\n"
"\n"
"float SkyLight_RiAngleBetween(const float thetav, const float phiv, const float theta, const float phi) {\n"
"	const float cospsi = sin(thetav) * sin(theta) * cos(phi - phiv) + cos(thetav) * cos(theta);\n"
"	if (cospsi >= 1.f)\n"
"		return 0.f;\n"
"	if (cospsi <= -1.f)\n"
"		return M_PI_F;\n"
"	return acos(cospsi);\n"
"}\n"
"\n"
"float3 SkyLight_ChromaticityToSpectrum(float Y, float x, float y) {\n"
"	float X, Z;\n"
"	\n"
"	if (y != 0.f)\n"
"		X = (x / y) * Y;\n"
"	else\n"
"		X = 0.f;\n"
"	\n"
"	if (y != 0.f && Y != 0.f)\n"
"		Z = (1.f - x - y) / y * Y;\n"
"	else\n"
"		Z = 0.f;\n"
"\n"
"	// Assuming sRGB (D65 illuminant)\n"
"	return (float3)(3.2410f * X - 1.5374f * Y - 0.4986f * Z,\n"
"			-0.9692f * X + 1.8760f * Y + 0.0416f * Z,\n"
"			0.0556f * X - 0.2040f * Y + 1.0570f * Z);\n"
"}\n"
"\n"
"float3 SkyLight_GetSkySpectralRadiance(__global SkyLight *skyLight,\n"
"		const float theta, const float phi) {\n"
"	// Add bottom half of hemisphere with horizon colour\n"
"	const float theta_fin = fmin(theta, (M_PI_F * .5f) - .001f);\n"
"	const float gamma = SkyLight_RiAngleBetween(theta, phi, skyLight->thetaS, skyLight->phiS);\n"
"\n"
"	// Compute xyY values\n"
"	const float x = skyLight->zenith_x * SkyLight_PerezBase(skyLight->perez_x, theta_fin, gamma);\n"
"	const float y = skyLight->zenith_y * SkyLight_PerezBase(skyLight->perez_y, theta_fin, gamma);\n"
"	const float Y = skyLight->zenith_Y * SkyLight_PerezBase(skyLight->perez_Y, theta_fin, gamma);\n"
"\n"
"	return SkyLight_ChromaticityToSpectrum(Y, x, y);\n"
"}\n"
"\n"
"float3 SkyLight_GetRadiance(__global SkyLight *skyLight, const float3 dir) {\n"
"	const float theta = SphericalTheta(-dir);\n"
"	const float phi = SphericalPhi(-dir);\n"
"	const float3 s = SkyLight_GetSkySpectralRadiance(skyLight, theta, phi);\n"
"\n"
"	return vload3(0, &skyLight->gain.r) * s;\n"
"}\n"
"\n"
"#endif\n"
"\n"
"//------------------------------------------------------------------------------\n"
"// SunLight\n"
"//------------------------------------------------------------------------------\n"
"\n"
"#if defined(PARAM_HAS_SUNLIGHT)\n"
"\n"
"float3 SunLight_Illuminate(__global SunLight *sunLight,\n"
"		const float u0, const float u1,\n"
"		float3 *dir, float *distance, float *directPdfW) {\n"
"	const float cosThetaMax = sunLight->cosThetaMax;\n"
"	const float3 sunDir = vload3(0, &sunLight->sunDir.x);\n"
"	*dir = UniformSampleCone(u0, u1, cosThetaMax, vload3(0, &sunLight->x.x), vload3(0, &sunLight->y.x), sunDir);\n"
"\n"
"	// Check if the point can be inside the sun cone of light\n"
"	const float cosAtLight = dot(sunDir, *dir);\n"
"	if (cosAtLight <= cosThetaMax)\n"
"		return BLACK;\n"
"\n"
"	*distance = INFINITY;\n"
"	*directPdfW = UniformConePdf(cosThetaMax);\n"
"\n"
"	return vload3(0, &sunLight->sunColor.r);\n"
"}\n"
"\n"
"float3 SunLight_GetRadiance(__global SunLight *sunLight, const float3 dir, float *directPdfA) {\n"
"	// Make the sun visible only if relsize has been changed (in order\n"
"	// to avoid fireflies).\n"
"	if (sunLight->relSize > 5.f) {\n"
"		const float cosThetaMax = sunLight->cosThetaMax;\n"
"		const float3 sunDir = vload3(0, &sunLight->sunDir.x);\n"
"\n"
"		if ((cosThetaMax < 1.f) && (dot(-dir, sunDir) > cosThetaMax)) {\n"
"			if (directPdfA)\n"
"				*directPdfA = UniformConePdf(cosThetaMax);\n"
"\n"
"			return vload3(0, &sunLight->sunColor.r);\n"
"		}\n"
"	}\n"
"\n"
"	return BLACK;\n"
"}\n"
"\n"
"#endif\n"
"\n"
"//------------------------------------------------------------------------------\n"
"// TriangleLight\n"
"//------------------------------------------------------------------------------\n"
"\n"
"float3 TriangleLight_Illuminate(__global TriangleLight *triLight,\n"
"		__global Material *mats, __global Texture *texs,\n"
"		const float3 p, const float u0, const float u1, const float u2,\n"
"		float3 *dir, float *distance, float *directPdfW\n"
"		IMAGEMAPS_PARAM_DECL) {\n"
"	const float3 p0 = vload3(0, &triLight->v0.x);\n"
"	const float3 p1 = vload3(0, &triLight->v1.x);\n"
"	const float3 p2 = vload3(0, &triLight->v2.x);\n"
"	float b0, b1, b2;\n"
"	float3 samplePoint = Triangle_Sample(\n"
"			p0, p1, p2,\n"
"			u0, u1,\n"
"			&b0, &b1, &b2);\n"
"		\n"
"	const float3 sampleN = Triangle_GetGeometryNormal(p0, p1, p2); // Light sources are supposed to be flat\n"
"\n"
"	*dir = samplePoint - p;\n"
"	const float distanceSquared = dot(*dir, *dir);;\n"
"	*distance = sqrt(distanceSquared);\n"
"	*dir /= (*distance);\n"
"\n"
"	const float cosAtLight = dot(sampleN, -(*dir));\n"
"	if (cosAtLight < DEFAULT_COS_EPSILON_STATIC)\n"
"		return BLACK;\n"
"\n"
"	*directPdfW = triLight->invArea * distanceSquared / cosAtLight;\n"
"\n"
"	const float2 uv0 = vload2(0, &triLight->uv0.u);\n"
"	const float2 uv1 = vload2(0, &triLight->uv1.u);\n"
"	const float2 uv2 = vload2(0, &triLight->uv2.u);\n"
"	const float2 triUV = Triangle_InterpolateUV(uv0, uv1, uv2, b0, b1, b2);\n"
"\n"
"	return Material_GetEmittedRadiance(&mats[triLight->materialIndex], texs, triUV\n"
"			IMAGEMAPS_PARAM);\n"
"}\n"
"\n"
"float3 TriangleLight_GetRadiance(__global TriangleLight *triLight,\n"
"		__global Material *mats, __global Texture *texs, \n"
"		const float3 dir, const float3 hitPointNormal,\n"
"		const float2 triUV, float *directPdfA\n"
"		IMAGEMAPS_PARAM_DECL) {\n"
"	const float cosOutLight = dot(hitPointNormal, dir);\n"
"	if (cosOutLight <= 0.f)\n"
"		return BLACK;\n"
"\n"
"	if (directPdfA)\n"
"		*directPdfA = triLight->invArea;\n"
"\n"
"	return Material_GetEmittedRadiance(&mats[triLight->materialIndex], texs, triUV\n"
"			IMAGEMAPS_PARAM);\n"
"}\n"
; } }
